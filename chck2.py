import telebot
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import difflib

bot = telebot.TeleBot("7671940309:AAECI8c7p3loeQ8aFzZ0dEuyXw_OYwp3mR8")
user_data = {}

topic_options = ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–°–ø–æ—Ä—Ç", "–ú—É–∑—ã–∫–∞", "–ö–∞–∑–∞—Ö—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏", "–ò—Å—Ç–æ—Ä–∏—è", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã", "–ë–∏–∑–Ω–µ—Å –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è", "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –∂–∏–∑–Ω—å", "–î—Ä—É–≥–æ–µ", "‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]

def has_common_language(lang1, lang2):
    set1 = set(map(str.strip, lang1.lower().split(',')))
    set2 = set(map(str.strip, lang2.lower().split(',')))
    return not set1.isdisjoint(set2)

def fuzzy_match(str1, str2, threshold=0.7):
    return difflib.SequenceMatcher(None, str1.lower(), str2.lower()).ratio() >= threshold

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    cur.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY,name TEXT,password TEXT,age TEXT,country TEXT,native_language TEXT,kazakh_level TEXT,other_languages TEXT,learning_reason TEXT,topics TEXT,conversation_partner TEXT,opposite_gender TEXT,telegram_username TEXT,likes TEXT)''')

    conn.commit()
    cur.close()
    conn.close()

    username = message.from_user.username if message.from_user.username else None
    if username:
        user_data[message.chat.id] = {'telegram_username': username}
        bot.send_message(message.chat.id, "–°”ô–ª–µ–º!üëã\n "
                                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QazaqTalk ‚Äì –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n "
                                        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ª–µ–≥–∫–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Å–≤–æ–∏—Ç—å –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫. \n"
                                        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ï–Ω–¥–µ—à–µ, –±—ñ—Ä–≥–µ “Ø–π—Ä–µ–Ω–µ–π—ñ–∫! üöÄ \n"
                                        "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ. üòä")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username:")
        bot.register_next_step_handler(message, get_username)

def get_username(message):
    user_data[message.chat.id] = {'telegram_username': message.text.strip()}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_data[message.chat.id]['name'] = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ, —Ç–æ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ):")
    bot.register_next_step_handler(message, get_password)

def get_password(message):
    user_data[message.chat.id]['password'] = message.text.strip()
    ask_question(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", ["10-13", "14-16", "17-20", "21-25", "30-35", "35+"])


def get_country(message):
    user_data[message.chat.id]['country'] = message.text.strip()
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–∞—à —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫?")
    bot.register_next_step_handler(message, get_native_language)

def get_native_language(message):
    user_data[message.chat.id]['native_language'] = message.text.strip()
    ask_question(message.chat.id, "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ?",
                 ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ù–æ—Å–∏—Ç–µ–ª—å"])

def get_other_languages(message):
    user_data[message.chat.id]['other_languages'] = message.text.strip()
    ask_question(message.chat.id, "–ü–æ—á–µ–º—É –≤—ã –∏–∑—É—á–∞–µ—Ç–µ –∫–∞–∑–∞—Ö—Å–∫–∏–π?",
                 ["–î–ª—è —Ä–∞–±–æ—Ç—ã", "–î–ª—è —É—á–µ–±—ã", "–î–ª—è –æ–±—â–µ–Ω–∏—è", "–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞", "–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–î—Ä—É–≥–æ–µ"])

def save_learning_reason(chat_id, reason):
    user_data[chat_id]['learning_reason'] = reason
    user_data[chat_id]['topics'] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    selected = user_data[chat_id]['topics']
    markup = InlineKeyboardMarkup()
    for topic in topic_options[:-1]:
        label = topic
        markup.add(InlineKeyboardButton(text=label, callback_data=topic))
    markup.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"))

    msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (3-5):", reply_markup=markup)
    user_data[chat_id]['topic_msg_id'] = msg.message_id

def show_topic_options(chat_id):
    selected = user_data[chat_id].get('topics', [])
    markup = InlineKeyboardMarkup()

    for topic in topic_options[:-1]:
        label = f"‚úÖ {topic}" if topic in selected else topic
        markup.add(InlineKeyboardButton(text=label, callback_data=topic))

    markup.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(chat_id=chat_id, message_id=user_data[chat_id]['topic_msg_id'], reply_markup=markup)

def ask_question(chat_id, question, options):
    markup = InlineKeyboardMarkup()
    for option in options:
        markup.add(InlineKeyboardButton(text=option, callback_data=option))
    bot.send_message(chat_id, question, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data = call.data

    bot.answer_callback_query(call.id)

    if 'age' not in user_data[chat_id]:
        user_data[chat_id]['age'] = data
        bot.send_message(chat_id, "–ò–∑ –∫–∞–∫–æ–π –≤—ã —Å—Ç—Ä–∞–Ω—ã?")
        bot.register_next_step_handler(call.message, get_country)

    elif 'kazakh_level' not in user_data[chat_id]:
        user_data[chat_id]['kazakh_level'] = data
        bot.send_message(chat_id, "–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –≤—ã –µ—â–µ –∑–Ω–∞–µ—Ç–µ?")
        bot.register_next_step_handler(call.message, get_other_languages)

    elif 'learning_reason' not in user_data[chat_id]:
        if data == "–î—Ä—É–≥–æ–µ":
            bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ:")
            bot.register_next_step_handler(call.message, lambda msg: save_learning_reason(chat_id, msg.text))
        else:
            save_learning_reason(chat_id, data)

    elif 'topics' in user_data[chat_id]:
        if data == "‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
            selected = user_data[chat_id]['topics']
            if 3 <= len(selected) <= 5:
                save_to_db(chat_id)
            else:
                bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 3 –¥–æ 5 —Ç–µ–º.", show_alert=True)
        else:
            topics = user_data[chat_id]['topics']
            if data in topics:
                topics.remove(data)
            else:
                if len(topics) < 5:
                    topics.append(data)
                else:
                    bot.answer_callback_query(call.id, "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 —Ç–µ–º.", show_alert=True)
            show_topic_options(chat_id)  # –æ–±–Ω–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏

def save_to_db(chat_id):
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute("""REPLACE INTO users (id, name, password, age, country, native_language, kazakh_level, other_languages, learning_reason, topics, conversation_partner, opposite_gender, telegram_username, likes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, '')""", (chat_id, user_data[chat_id]['name'], user_data[chat_id]['password'], user_data[chat_id]['age'],user_data[chat_id]['country'], user_data[chat_id]['native_language'], user_data[chat_id]['kazakh_level'],user_data[chat_id]['other_languages'], user_data[chat_id]['learning_reason'], ','.join(user_data[chat_id]['topics']),'', '', user_data[chat_id]['telegram_username']))
    conn.commit()
    cur.close()
    conn.close()
    find_match(chat_id)

def find_match(chat_id):
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE id != ?", (chat_id,))
    users = cur.fetchall()
    cur.close()
    conn.close()

    current_user = user_data[chat_id]
    for user in users:
        match_score = 0
        required_score = 3  # –ø–æ—Ä–æ–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        if fuzzy_match(current_user['country'], user[4]):
            match_score += 1

        if fuzzy_match(current_user['native_language'], user[5]):
            match_score += 1

        if fuzzy_match(current_user['kazakh_level'], user[6]):
            match_score += 1

        if has_common_language(current_user['other_languages'], user[7]):
            match_score += 1

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—á–∏–Ω—É –∏–∑—É—á–µ–Ω–∏—è
        if current_user['learning_reason'] == "–î—Ä—É–≥–æ–µ" or user[8] == "–î—Ä—É–≥–æ–µ":
            required_score -= 1  # –ø–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
        else:
            if fuzzy_match(current_user['learning_reason'], user[8]):
                match_score += 1

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–º
        user_topics = set(map(str.strip, user[9].lower().split(',')))
        current_topics = set(map(str.strip, current_user['topics']))

        shared = user_topics.intersection(current_topics)

        if len(current_topics) <= 2 or len(user_topics) <= 2:
            if shared:
                match_score += 1
        else:
            total = max(len(current_topics), len(user_topics))
            if len(shared) / total >= 0.5:
                match_score += 1

        if match_score >= required_score:
            match_message = (f"–í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{user[12]}!\n"
                             f"–ò–º—è: {user[1]}\n–í–æ–∑—Ä–∞—Å—Ç: {user[3]}\n–°—Ç—Ä–∞–Ω–∞: {user[4]}\n"
                             f"–†–æ–¥–Ω–æ–π —è–∑—ã–∫: {user[5]}\n–£—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ: {user[6]}\n")
            bot.send_message(chat_id, match_message)
            bot.send_message(user[0], match_message.replace(f"@{user[12]}", f"@{current_user['telegram_username']}"))
            return

    bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

bot.polling(none_stop=True)
