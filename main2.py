import os
import traceback
import time
import threading
import sqlite3
import logging
from datetime import datetime, timezone, timedelta
from telebot import TeleBot, types
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = os.getenv('DATABASE_PATH', '/data/database.db')
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 8080))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
user_state = {}

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.lock = threading.Lock()
        self._init_db()
    
    def _get_connection(self):  # ‚úÖ Correctly indented inside the class
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def _ensure_db_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
    def execute(self, query, params=(), commit=False):
                """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
                with self.lock:
                    with self._get_connection() as conn:
                        cur = conn.cursor()
                        try:
                            cur.execute(query, params)
                            if commit:
                                conn.commit()
                            if query.strip().upper().startswith('SELECT'):
                                return cur.fetchall()
                            return True
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}\n–ó–∞–ø—Ä–æ—Å: {query}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                            conn.rollback()
                            raise

    def add_missing_columns(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ rating
            cols = self.execute("PRAGMA table_info(users)")
            if cols and isinstance(cols, list):  # Check if we got results
                if not any(c[1] == 'rating' for c in cols):  # Column name is at index 1
                    self.execute(
                        "ALTER TABLE users ADD COLUMN rating REAL DEFAULT 3.0",
                        commit=True
                    )
                    logger.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü rating –≤ —Ç–∞–±–ª–∏—Ü—É users")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
            raise

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        tables = [
            '''CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                name TEXT,
                age TEXT,
                kazakh_level TEXT,
                gender TEXT,
                preferred_gender TEXT,
                telegram_username TEXT
            )''',
            '''CREATE TABLE IF NOT EXISTS matches (
                user1 INTEGER,
                user2 INTEGER,
                match_time TEXT,
                PRIMARY KEY (user1, user2)
            )''',
            '''CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                from_user INTEGER,
                to_user INTEGER,
                question1 INTEGER,
                question2 INTEGER,
                question3 INTEGER,
                comment TEXT,
                timestamp TEXT
            )''',
            '''CREATE TABLE IF NOT EXISTS past_matches (
                user1 INTEGER,
                user2 INTEGER,
                match_time TEXT,
                PRIMARY KEY (user1, user2)
            )''',
            '''CREATE TABLE IF NOT EXISTS review_queue (
                chat_id1 INTEGER,
                chat_id2 INTEGER,
                send_time TEXT
            )''',  
            '''CREATE INDEX IF NOT EXISTS idx_feedback_to_user ON feedback(to_user)''',
            '''CREATE INDEX IF NOT EXISTS idx_matches_user1 ON matches(user1)''',
            '''CREATE INDEX IF NOT EXISTS idx_matches_user2 ON matches(user2)'''
        ]
        
        with self._get_connection() as conn: 
            cur = conn.cursor()
            for table in tables:
                cur.execute(table)
            conn.commit()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database(DB_PATH)
db.add_missing_columns()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def age_range_to_tuple(age_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –∫–æ—Ä—Ç–µ–∂ (min, max)"""
    if '+' in age_str:
        return (int(age_str.replace('+', '')), 99)
    return tuple(map(int, age_str.split('-')))

def age_overlap(age1, age2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    r1 = age_range_to_tuple(age1)
    r2 = age_range_to_tuple(age2)
    return max(r1[0], r2[0]) <= min(r1[1], r2[1])

def level_match(level1, level2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π —è–∑—ã–∫–∞"""
    LEVELS = ['–ù–∞—á–∏–Ω–∞—é—â–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '–ù–æ—Å–∏—Ç–µ–ª—å']
    return abs(LEVELS.index(level1) - LEVELS.index(level2)) <= 1

def get_average_feedback(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = db.execute(
        "SELECT AVG(question1), AVG(question2), AVG(question3) FROM feedback WHERE to_user = ?",
        (user_id,)
    )
    if result and all(r is not None for r in result[0]):
        return sum(result[0]) / 3
    return None

def update_user_rating(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users"""
    try:
        avg_rating = db.execute(
            "SELECT AVG((question1 + question2 + question3) / 3.0) FROM feedback WHERE to_user = ?",
            (user_id,)
        )[0][0]
        if avg_rating is not None:  # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
            db.execute(
            "SELECT AVG((question1 + question2 + question3) / 3.0) FROM feedback WHERE to_user = ?",
            (user_id,)
        )
        
        if avg_rating:
            db.execute(
                "UPDATE users SET rating = ? WHERE id = ?",
                (round(avg_rating, 2), user_id),
                commit=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è {user_id}: {e}")

def ask_question(chat_id, question, options):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup()
    for option in options:
        markup.add(types.InlineKeyboardButton(option, callback_data=option))
    bot.send_message(chat_id, question, reply_markup=markup)

# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start/restart
def start_registration(message, is_restart=False):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        chat_id = message.chat.id
        
        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        if is_restart:
            try:
                with db.lock:
                    db.execute("DELETE FROM users WHERE id = ?", (chat_id,), commit=True)
                    db.execute("DELETE FROM matches WHERE user1 = ? OR user2 = ?", 
                             (chat_id, chat_id), commit=True)
                    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    user_data.pop(chat_id, None)
                    user_state.pop(chat_id, None)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ restart: {traceback.format_exc()}")
                raise

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º username –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
        username = getattr(message.from_user, 'username', None)
        if not username or not username.strip():
            msg = ("üîÅ –ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @):" 
                  if is_restart else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @):")
            sent_msg = bot.send_message(chat_id, msg)
            bot.register_next_step_handler(sent_msg, get_username)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/—Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[chat_id] = {'telegram_username': username.strip('@')}
        
        greeting = "üîÅ –ê–Ω–∫–µ—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!\n\n" if is_restart else ""
        sent_msg = bot.send_message(
            chat_id,
            f"{greeting}–°”ô–ª–µ–º! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QazaqTalk!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        bot.register_next_step_handler(sent_msg, get_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ {'/restart' if is_restart else '/start'}: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    start_registration(message)

@bot.message_handler(commands=['restart'])
def handle_restart(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart"""
    start_registration(message, is_restart=True)

@bot.message_handler(commands=['guidebook'])
def send_guidebook(message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /guidebook"""
    try:
        chat_id = message.chat.id
        guidebook_path = 'guidebook.docx'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
        if not os.path.exists(guidebook_path):
            logger.warning(f"–§–∞–π–ª –≥–∞–π–¥–±—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {guidebook_path}")
            bot.send_message(
                chat_id,
                "üìö –ì–∞–π–¥–±—É–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(guidebook_path) / (1024 * 1024)  # –≤ MB
        if file_size > 50:  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 50MB –¥–ª—è –±–æ—Ç–æ–≤
            logger.error(f"–§–∞–π–ª –≥–∞–π–¥–±—É–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size:.2f}MB")
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –§–∞–π–ª –≥–∞–π–¥–±—É–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
        with open(guidebook_path, 'rb') as f:
            bot.send_chat_action(chat_id, 'upload_document')
            bot.send_document(
                chat_id=chat_id,
                document=f,
                caption="üìò QazaqTalk Guidebook",
                timeout=30,
                visible_file_name="QazaqTalk_Guide.docx"  # –ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∞–π–¥–±—É–∫–∞: {traceback.format_exc()}")
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–±—É–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

def get_username(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data[message.chat.id] = {'telegram_username': message.text.strip()}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def get_name(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data[message.chat.id]['name'] = message.text.strip()
        ask_question(
            message.chat.id,
            "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
            ["10-13", "14-16", "17-20", "21-25", "30-35", "35+"]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        chat_id = call.message.chat.id
        data = call.data

        if 'age' not in user_data.get(chat_id, {}):
            user_data[chat_id]['age'] = data
            ask_question(chat_id, "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ?", 
                        ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ù–æ—Å–∏—Ç–µ–ª—å"])
        
        elif 'kazakh_level' not in user_data.get(chat_id, {}):
            user_data[chat_id]['kazakh_level'] = data
            ask_question(chat_id, "–í–∞—à –ø–æ–ª?", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
        
        elif 'gender' not in user_data.get(chat_id, {}):
            user_data[chat_id]['gender'] = data
            ask_question(chat_id, "–° –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è?", 
                        ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ –≤–∞–∂–Ω–æ"])
        
        elif 'preferred_gender' not in user_data.get(chat_id, {}):
            user_data[chat_id]['preferred_gender'] = data
            save_to_db(chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def save_to_db(chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        user = user_data[chat_id]
        db.execute(
            """INSERT OR REPLACE INTO users 
            (id, name, age, kazakh_level, gender, preferred_gender, telegram_username) 
            VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (chat_id, user['name'], user['age'], user['kazakh_level'], 
             user['gender'], user['preferred_gender'], user['telegram_username']),
            commit=True
        )
        find_match(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

# --- –°–∏—Å—Ç–µ–º–∞ –º—ç—Ç—á–∏–Ω–≥–∞ ---
def find_match(chat_id):
    
    """–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø–∞—Ä—ã –¥–ª—è {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        active_matches = db.execute(
            "SELECT user2, match_time FROM matches WHERE user1 = ?",
            (chat_id,)
        )
        
        if active_matches:
            match_time = datetime.fromisoformat(active_matches[0]['match_time'])
            if datetime.now(timezone.utc) < match_time + timedelta(hours=48):
                bot.send_message(chat_id, "‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        # –ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_user = db.execute(
            "SELECT * FROM users WHERE id = ?", 
            (chat_id,)
        )[0]

        if not current_user:
                bot.send_message(chat_id, "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞.")
                return
        
        exclude_users = {row['user1'] for row in db.execute(
            "SELECT user1 FROM matches"
        )}.union({chat_id})

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_rating = get_average_feedback(chat_id) or 3.0  # 3.0 - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ past_matches
        exclude_users |= {row['user2'] for row in db.execute(
            "SELECT user2 FROM past_matches WHERE user1 = ?",
            (chat_id,)
        )}
        
        potential_matches = db.execute(
    """SELECT 
        u.id, u.name, u.age, u.kazakh_level, 
        u.gender, u.preferred_gender, u.telegram_username,
        COALESCE(f.avg_rating, 3.0) as rating
    FROM users u
    LEFT JOIN (
        SELECT 
            to_user, 
            (AVG(question1) + AVG(question2) + AVG(question3)) / 3.0 as avg_rating
        FROM feedback 
        GROUP BY to_user
    ) f ON u.id = f.to_user
    WHERE u.id NOT IN ({}) 
    AND u.preferred_gender IN (?, '–ù–µ –≤–∞–∂–Ω–æ')
    AND u.gender IN (?, '–ù–µ –≤–∞–∂–Ω–æ')
    ORDER BY ABS(COALESCE(f.avg_rating, 3.0) - ?) ASC
    LIMIT 50""".format(','.join('?'*len(exclude_users))),
    [*exclude_users, current_user['gender'], current_user['preferred_gender'], current_rating]
)
        for match in potential_matches:
            if (level_match(current_user['kazakh_level'], match['kazakh_level']) and 
               age_overlap(current_user['age'], match['age'])):
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
                match_time = datetime.now(timezone.utc).isoformat()
                db.execute(
                    "INSERT INTO matches (user1, user2, match_time) VALUES (?, ?, ?)",
                    (chat_id, match['id'], match_time),
                    commit=True
                )
                db.execute(
                    "INSERT INTO matches (user1, user2, match_time) VALUES (?, ?, ?)",
                    (match['id'], chat_id, match_time),
                    commit=True
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                bot.send_message(
                    chat_id,
                    f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{match['telegram_username']}!\n"
                    f"üë§ –ò–º—è: {match['name']}\n"
                    f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {match['age']}\n"
                    f"‚öß –ü–æ–ª: {match['gender']}\n"
                    f"üó£ –£—Ä–æ–≤–µ–Ω—å: {match['kazakh_level']}"
                )
                
                bot.send_message(
                    match['id'],
                    f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{current_user['telegram_username']}!\n"
                    f"üë§ –ò–º—è: {current_user['name']}\n"
                    f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {current_user['age']}\n"
                    f"‚öß –ü–æ–ª: {current_user['gender']}\n"
                    f"üó£ –£—Ä–æ–≤–µ–Ω—å: {current_user['kazakh_level']}"
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
                schedule_review(chat_id, match['id'])  # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                schedule_review(match['id'], chat_id)  # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return

        bot.send_message(chat_id, "üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ ---
def schedule_review(chat_id1, chat_id2):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤"""
    try:
        review_time = (datetime.now(timezone.utc) + timedelta(hours=48)).isoformat()
        db.execute(
            "INSERT INTO review_queue (chat_id1, chat_id2, send_time) VALUES (?, ?, ?)",
            (chat_id1, chat_id2, review_time),
            commit=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")

def schedule_review_check():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    while True:
        try:
            now = datetime.now(timezone.utc)
            reviews = db.execute(
    "SELECT chat_id1, chat_id2, send_time FROM review_queue "
    "WHERE send_time <= ? ORDER BY send_time LIMIT 100",
    (now.isoformat(),)
)
            
            for review in reviews:
                if datetime.fromisoformat(review['send_time']) <= now:
                    send_review_request(review['chat_id1'], review['chat_id2'])
                    db.execute(
                        "DELETE FROM review_queue WHERE chat_id1 = ? AND chat_id2 = ?",
                        (review['chat_id1'], review['chat_id2']),
                        commit=True
                    )
            
            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {traceback.format_exc()}")
            time.sleep(300)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è send_review_request
def send_review_request(chat_id, partner_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤"""
    try:
        partner_info = db.execute(
            "SELECT name, telegram_username FROM users WHERE id = ?", 
            (partner_id,)
        )
        
        if not partner_info or len(partner_info) == 0:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        partner = partner_info[0]

        message = (
            f"üìù *–í—Ä–µ–º—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –≤–∞—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ —Å {partner['name']} (@{partner['telegram_username']})*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ:\n"
            "1Ô∏è‚É£ –õ–µ–≥–∫–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è (1-5)\n"
            "2Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-5)\n"
            "3Ô∏è‚É£ –î—Ä—É–∂–µ–ª—é–±–∏–µ (1-5)\n\n"
            "*–§–æ—Ä–º–∞—Ç:* `–æ—Ü–µ–Ω–∫–∞1, –æ—Ü–µ–Ω–∫–∞2, –æ—Ü–µ–Ω–∫–∞3 [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`\n"
            "–ü—Ä–∏–º–µ—Ä: `5, 4, 5 –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!`\n\n"
            "–ï—Å–ª–∏ –Ω–µ –æ–±—â–∞–ª–∏—Å—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `0`"
        )
        
        markup = types.ForceReply(selective=False)
        msg = bot.send_message(
            chat_id, 
            message, 
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        user_state[chat_id] = {
            'step': 'awaiting_feedback',
            'partner_id': partner_id,
            'message_id': msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è process_feedback
@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get('step') == 'awaiting_feedback')
def process_feedback(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat_id = message.chat.id
        state = user_state.get(chat_id, {})
        
        if not state or 'partner_id' not in state:
            bot.send_message(chat_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        partner_id = state['partner_id']

        is_valid_pair = db.execute(
            "SELECT 1 FROM matches WHERE user1 = ? AND user2 = ?",
            (chat_id, partner_id)
        )
        if not is_valid_pair or len(is_valid_pair) == 0:
            bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            if chat_id in user_state:
                del user_state[chat_id]
            return
        
        text = message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if text == '0':
            bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ, –º—ã —É—á—Ç—ë–º —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å")
            del user_state[chat_id]
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥
        parts = text.split(maxsplit=1)
        if len(parts[0].split(',')) != 3:
            raise ValueError("–ù—É–∂–Ω–æ 3 –æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

        scores = [int(s.strip()) for s in parts[0].split(',')]
        if any(s < 1 or s > 5 for s in scores):
            raise ValueError("–û—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")

        comment = parts[1] if len(parts) > 1 else None
        if any(s <= 2 for s in scores) and not comment:
            raise ValueError("–î–ª—è –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ –Ω—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        db.execute(
    """INSERT INTO feedback 
    (from_user, to_user, question1, question2, question3, comment, timestamp) 
    VALUES (?, ?, ?, ?, ?, ?, ?)""",
    (chat_id, partner_id, *scores, comment, datetime.now(timezone.utc).isoformat()),
    commit=True
)
        update_user_rating(partner_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if chat_id in user_state:
            del user_state[chat_id]

    except ValueError as ve:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–∑—ã–≤: {ve}")
        bot.send_message(chat_id, f"‚ö†Ô∏è {ve}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        if chat_id in user_state:
            del user_state[chat_id]

# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    return 'Bad request', 400

@app.route('/')
def index():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return 'QazaqTalk Bot is running!'

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    try:
        # 1. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        threading.Thread(target=schedule_review_check, daemon=True).start()
        
        # 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
        bot.remove_webhook()
        time.sleep(2)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        
        webhook_url = f"https://{WEBHOOK_URL}/{BOT_TOKEN}"
        if not WEBHOOK_URL:
            logger.error("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        bot.set_webhook(
            url=webhook_url,
            max_connections=50,
            allowed_updates=["message", "callback_query"]
        )
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")
        
        # 3. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        
        # –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–µ–º Waitress
        from waitress import serve
        serve(
            app,
            host='0.0.0.0',
            port=PORT,
            threads=4,
            url_scheme='https'
        )
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise
