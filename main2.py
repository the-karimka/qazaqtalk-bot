import os
import traceback
import time
import threading
import sqlite3
import logging
from datetime import datetime, timezone, timedelta
from telebot import TeleBot, types
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = os.getenv('DATABASE_PATH', '/data/database.db')
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 8080))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = TeleBot(BOT_TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
user_state = {}

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.lock = threading.Lock()
        self._init_db()

    def _ensure_db_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
            
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        tables = [
            '''CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                name TEXT,
                age TEXT,
                kazakh_level TEXT,
                gender TEXT,
                preferred_gender TEXT,
                telegram_username TEXT
            )''',
            '''CREATE TABLE IF NOT EXISTS matches (
                user1 INTEGER,
                user2 INTEGER,
                match_time TEXT,
                PRIMARY KEY (user1, user2)
            )''',
            '''CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                from_user INTEGER,
                to_user INTEGER,
                question1 INTEGER,
                question2 INTEGER,
                question3 INTEGER,
                comment TEXT,
                timestamp TEXT
            )''',
            '''CREATE TABLE IF NOT EXISTS past_matches (
                user1 INTEGER,
                user2 INTEGER,
                match_time TEXT,
                PRIMARY KEY (user1, user2)
            )''',
            '''CREATE TABLE IF NOT EXISTS review_queue (
                chat_id1 INTEGER,
                chat_id2 INTEGER,
                send_time TEXT
            )'''
        ]

        with self._get_connection() as conn:
            cur = conn.cursor()
            for table in tables:
                cur.execute(table)
            conn.commit()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")

    def _get_connection(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn

    def execute(self, query, params=(), commit=False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
        with self.lock:
            with self._get_connection() as conn:
                cur = conn.cursor()
                try:
                    cur.execute(query, params)
                    if commit:
                        conn.commit()
                    if query.strip().upper().startswith('SELECT'):
                        return cur.fetchall()
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}\n–ó–∞–ø—Ä–æ—Å: {query}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                    conn.rollback()
                    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = Database(DB_PATH)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def age_range_to_tuple(age_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤ –∫–æ—Ä—Ç–µ–∂ (min, max)"""
    if '+' in age_str:
        return (int(age_str.replace('+', '')), 99)
    return tuple(map(int, age_str.split('-')))

def age_overlap(age1, age2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    r1 = age_range_to_tuple(age1)
    r2 = age_range_to_tuple(age2)
    return max(r1[0], r2[0]) <= min(r1[1], r2[1])

def level_match(level1, level2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π —è–∑—ã–∫–∞"""
    LEVELS = ['–ù–∞—á–∏–Ω–∞—é—â–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '–ù–æ—Å–∏—Ç–µ–ª—å']
    return abs(LEVELS.index(level1) - LEVELS.index(level2)) <= 1

def get_average_feedback(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = db.execute(
        "SELECT AVG(question1), AVG(question2), AVG(question3) FROM feedback WHERE to_user = ?",
        (user_id,)
    )
    if result and all(r is not None for r in result[0]):
        return sum(result[0]) / 3
    return None

def ask_question(chat_id, question, options):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup()
    for option in options:
        markup.add(types.InlineKeyboardButton(option, callback_data=option))
    bot.send_message(chat_id, question, reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        username = message.from_user.username
        if not username:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username:")
            bot.register_next_step_handler(message, get_username)
            return

        user_data[message.chat.id] = {'telegram_username': username}
        bot.send_message(
            message.chat.id,
            "–°”ô–ª–µ–º! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QazaqTalk!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        bot.register_next_step_handler(message, get_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def get_username(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data[message.chat.id] = {'telegram_username': message.text.strip()}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, get_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def get_name(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_data[message.chat.id]['name'] = message.text.strip()
        ask_question(
            message.chat.id,
            "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
            ["10-13", "14-16", "17-20", "21-25", "30-35", "35+"]
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    try:
        chat_id = call.message.chat.id
        data = call.data

        if 'age' not in user_data.get(chat_id, {}):
            user_data[chat_id]['age'] = data
            ask_question(chat_id, "–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ?", 
                        ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ù–æ—Å–∏—Ç–µ–ª—å"])
        
        elif 'kazakh_level' not in user_data.get(chat_id, {}):
            user_data[chat_id]['kazakh_level'] = data
            ask_question(chat_id, "–í–∞—à –ø–æ–ª?", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
        
        elif 'gender' not in user_data.get(chat_id, {}):
            user_data[chat_id]['gender'] = data
            ask_question(chat_id, "–° –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è?", 
                        ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ –≤–∞–∂–Ω–æ"])
        
        elif 'preferred_gender' not in user_data.get(chat_id, {}):
            user_data[chat_id]['preferred_gender'] = data
            save_to_db(chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def save_to_db(chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        user = user_data[chat_id]
        db.execute(
            """INSERT OR REPLACE INTO users 
            (id, name, age, kazakh_level, gender, preferred_gender, telegram_username) 
            VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (chat_id, user['name'], user['age'], user['kazakh_level'], 
             user['gender'], user['preferred_gender'], user['telegram_username']),
            commit=True
        )
        find_match(chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

# --- –°–∏—Å—Ç–µ–º–∞ –º—ç—Ç—á–∏–Ω–≥–∞ ---
def find_match(chat_id):
    """–ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –ø–∞—Ä—ã –¥–ª—è {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        active_matches = db.execute(
            "SELECT user2, match_time FROM matches WHERE user1 = ?",
            (chat_id,)
        )
        
        if active_matches:
            match_time = datetime.fromisoformat(active_matches[0]['match_time'])
            if datetime.now(timezone.utc) < match_time + timedelta(hours=48):
                bot.send_message(chat_id, "‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        # –ü–æ–∏—Å–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_user = db.execute(
            "SELECT * FROM users WHERE id = ?", 
            (chat_id,)
        )[0]

        exclude_users = {row['user1'] for row in db.execute(
            "SELECT user1 FROM matches"
        )}.union({chat_id})

        potential_matches = db.execute(
            """SELECT * FROM users 
            WHERE id NOT IN ({}) 
            AND preferred_gender IN (?, '–ù–µ –≤–∞–∂–Ω–æ')
            AND gender IN (?, '–ù–µ –≤–∞–∂–Ω–æ')""".format(','.join('?'*len(exclude_users))),
            [*exclude_users, current_user['gender'], current_user['preferred_gender']]
        )

        for match in potential_matches:
            if (level_match(current_user['kazakh_level'], match['kazakh_level']) and 
               age_overlap(current_user['age'], match['age'])):
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É
                match_time = datetime.now(timezone.utc).isoformat()
                db.execute(
                    "INSERT INTO matches (user1, user2, match_time) VALUES (?, ?, ?)",
                    (chat_id, match['id'], match_time),
                    commit=True
                )
                db.execute(
                    "INSERT INTO matches (user1, user2, match_time) VALUES (?, ?, ?)",
                    (match['id'], chat_id, match_time),
                    commit=True
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                bot.send_message(
                    chat_id,
                    f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{match['telegram_username']}!\n"
                    f"üë§ –ò–º—è: {match['name']}\n"
                    f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {match['age']}\n"
                    f"‚öß –ü–æ–ª: {match['gender']}\n"
                    f"üó£ –£—Ä–æ–≤–µ–Ω—å: {match['kazakh_level']}"
                )
                
                bot.send_message(
                    match['id'],
                    f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{current_user['telegram_username']}!\n"
                    f"üë§ –ò–º—è: {current_user['name']}\n"
                    f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {current_user['age']}\n"
                    f"‚öß –ü–æ–ª: {current_user['gender']}\n"
                    f"üó£ –£—Ä–æ–≤–µ–Ω—å: {current_user['kazakh_level']}"
                )
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
                schedule_review(chat_id, match['id'])
                return

        bot.send_message(chat_id, "üòï –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã: {traceback.format_exc()}")
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ ---
def schedule_review(chat_id1, chat_id2):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤"""
    try:
        review_time = (datetime.now(timezone.utc) + timedelta(hours=48)).isoformat()
        db.execute(
            "INSERT INTO review_queue (chat_id1, chat_id2, send_time) VALUES (?, ?, ?)",
            (chat_id1, chat_id2, review_time),
            commit=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")

def schedule_review_check():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    while True:
        try:
            now = datetime.now(timezone.utc)
            reviews = db.execute(
                "SELECT chat_id1, chat_id2, send_time FROM review_queue"
            )
            
            for review in reviews:
                if datetime.fromisoformat(review['send_time']) <= now:
                    send_review_request(review['chat_id1'], review['chat_id2'])
                    db.execute(
                        "DELETE FROM review_queue WHERE chat_id1 = ? AND chat_id2 = ?",
                        (review['chat_id1'], review['chat_id2']),
                        commit=True
                    )
            
            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {traceback.format_exc()}")
            time.sleep(300)

def send_review_request(chat_id, partner_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤"""
    try:
        message = (
            "–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (1-5):\n"
            "1) –õ–µ–≥–∫–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è\n"
            "2) –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "3) –î—Ä—É–∂–µ–ª—é–±–∏–µ\n\n"
            "–§–æ—Ä–º–∞—Ç: `5,4,5 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`"
        )
        
        bot.send_message(chat_id, message)
        user_state[chat_id] = {'step': 'awaiting_feedback', 'partner_id': partner_id}
        
        bot.send_message(partner_id, message)
        user_state[partner_id] = {'step': 'awaiting_feedback', 'partner_id': chat_id}
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get('step') == 'awaiting_feedback')
def process_feedback(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        chat_id = message.chat.id
        partner_id = user_state[chat_id]['partner_id']
        text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞
        existing = db.execute(
            "SELECT 1 FROM feedback WHERE from_user = ? AND to_user = ?",
            (chat_id, partner_id)
        )
        if existing:
            bot.send_message(chat_id, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ü–µ–Ω–æ–∫
        parts = text.split(maxsplit=1)
        scores = list(map(int, parts[0].split(',')))
        if len(scores) != 3:
            raise ValueError("–ù—É–∂–Ω–æ 3 –æ—Ü–µ–Ω–∫–∏")
        
        comment = parts[1] if len(parts) > 1 else ""
        if any(s in [1,2] for s in scores) and not comment:
            bot.send_message(chat_id, "‚ùó –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–µ –Ω—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        db.execute(
            """INSERT INTO feedback 
            (from_user, to_user, question1, question2, question3, comment, timestamp)
            VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (chat_id, partner_id, *scores, comment, datetime.now(timezone.utc).isoformat()),
            commit=True
        )

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–ª–æ—Ö–∏—Ö –ø–∞—Ä
        if any(s <= 3 for s in scores):
            db.execute(
                "INSERT OR IGNORE INTO past_matches (user1, user2, match_time) VALUES (?, ?, ?)",
                (chat_id, partner_id, datetime.now(timezone.utc).isoformat()),
                commit=True
            )
            db.execute(
                "INSERT OR IGNORE INTO past_matches (user1, user2, match_time) VALUES (?, ?, ?)",
                (partner_id, chat_id, datetime.now(timezone.utc).isoformat()),
                commit=True
            )

        bot.send_message(chat_id, "‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        del user_state[chat_id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞: {traceback.format_exc()}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `5,4,5 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π`")

# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@app.route('/' + BOT_TOKEN, methods=['POST'])
def webhook():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_data().decode('utf-8')
        update = types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    return 'Bad request', 400

@app.route('/')
def index():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    return 'QazaqTalk Bot is running!'

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
    threading.Thread(target=schedule_review_check, daemon=True).start()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    bot.remove_webhook()
    time.sleep(1)
    webhook_url = f"https://{WEBHOOK_URL}/{BOT_TOKEN}"
    bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=PORT)