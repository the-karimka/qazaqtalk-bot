import time
import threading
import sqlite3
from datetime import datetime, timedelta
import difflib
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot("YOUR_BOT_TOKEN")  # <-- –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
user_data = {}

def update_schema():
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute("PRAGMA table_info(users)")
    columns = [col[1] for col in cur.fetchall()]
    if 'gender' not in columns:
        cur.execute("ALTER TABLE users ADD COLUMN gender TEXT")
    if 'preferred_gender' not in columns:
        cur.execute("ALTER TABLE users ADD COLUMN preferred_gender TEXT")
    conn.commit()
    cur.close()
    conn.close()

def init_review_queue():
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        name TEXT,
        age TEXT,
        kazakh_level TEXT,
        gender TEXT,
        preferred_gender TEXT,
        telegram_username TEXT
    )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS review_queue (
        chat_id1 INTEGER,
        chat_id2 INTEGER,
        send_time TEXT
    )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS matches (
        user_id INTEGER PRIMARY KEY,
        partner_id INTEGER,
        match_time TEXT
    )''')
    conn.commit()
    cur.close()
    conn.close()

def fuzzy_match(str1, str2, threshold=0.7):
    return difflib.SequenceMatcher(None, str1.strip().lower(), str2.strip().lower()).ratio() >= threshold

@bot.message_handler(commands=['start'])
def start(message):
    update_schema()
    init_review_queue()
    username = message.from_user.username if message.from_user.username else None
    if username:
        user_data[message.chat.id] = {'telegram_username': username}
        bot.send_message(message.chat.id, "–°”ô–ª–µ–º!üëã\n"
                                          "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QazaqTalk ‚Äì –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n"
                                          "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ª–µ–≥–∫–æ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Å–≤–æ–∏—Ç—å –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫.\n"
                                          "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ï–Ω–¥–µ—à–µ, –±—ñ—Ä–≥–µ “Ø–π—Ä–µ–Ω–µ–π—ñ–∫! üöÄ\n"
                                          "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ. üòä")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram username:")
        bot.register_next_step_handler(message, get_username)

def get_username(message):
    user_data[message.chat.id] = {'telegram_username': message.text.strip()}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_data[message.chat.id]['name'] = message.text.strip()
    ask_question(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", ["10-13", "14-16", "17-20", "21-25", "30-35", "35+"])

def ask_question(chat_id, question, options):
    markup = InlineKeyboardMarkup()
    for option in options:
        markup.add(InlineKeyboardButton(text=option, callback_data=option))
    bot.send_message(chat_id, question, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data = call.data
    bot.answer_callback_query(call.id)

    if 'age' not in user_data[chat_id]:
        user_data[chat_id]['age'] = data
        ask_question(chat_id, "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ?", ["–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ù–æ—Å–∏—Ç–µ–ª—å"])
    elif 'kazakh_level' not in user_data[chat_id]:
        user_data[chat_id]['kazakh_level'] = data
        ask_question(chat_id, "–í–∞—à –ø–æ–ª?", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
    elif 'gender' not in user_data[chat_id]:
        user_data[chat_id]['gender'] = data
        ask_question(chat_id, "–° –∫–µ–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è?", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ –≤–∞–∂–Ω–æ"])
    elif 'preferred_gender' not in user_data[chat_id]:
        user_data[chat_id]['preferred_gender'] = data
        save_to_db(chat_id)

def save_to_db(chat_id):
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute("""REPLACE INTO users (id, name, age, kazakh_level, gender, preferred_gender, telegram_username) 
                   VALUES (?, ?, ?, ?, ?, ?, ?)""",
                (chat_id,
                 user_data[chat_id]['name'],
                 user_data[chat_id]['age'],
                 user_data[chat_id]['kazakh_level'],
                 user_data[chat_id]['gender'],
                 user_data[chat_id]['preferred_gender'],
                 user_data[chat_id]['telegram_username']))
    conn.commit()
    cur.close()
    conn.close()
    find_match(chat_id)

def send_review_request(chat_id, other_id):
    review_message = (
        "–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ:\n\n"
        "1. –ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –±—ã–ª–æ –æ–±—â–∞—Ç—å—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º?\n"
        "(1 ‚Äî –æ—á–µ–Ω—å —Ç—Ä—É–¥–Ω–æ, 5 ‚Äî –æ—á–µ–Ω—å –ª–µ–≥–∫–æ)\n\n"
        "2. –ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –±—ã–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏?\n"
        "(1 ‚Äî –ø–æ—á—Ç–∏ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, 5 ‚Äî –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π)\n\n"
        "3. –ù–∞—Å–∫–æ–ª—å–∫–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –±—ã–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫?\n"
        "(1 ‚Äî —Ö–æ–ª–æ–¥–Ω—ã–π, 5 ‚Äî –æ—á–µ–Ω—å –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π)\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∂–∞–ª–æ–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –Ω–∏–∂–µ üòä\n\n"
        "–ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤—Å—Ç—Ä–µ—á–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å."
    )
    try:
        bot.send_message(chat_id, review_message)
        bot.send_message(other_id, review_message)
    except Exception as e:
        print(f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞: {e}")

def schedule_review(chat_id1, chat_id2):
    review_time = (datetime.utcnow() + timedelta(hours=48)).isoformat()
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO review_queue (chat_id1, chat_id2, send_time) VALUES (?, ?, ?)", (chat_id1, chat_id2, review_time))
    conn.commit()
    cur.close()
    conn.close()

def schedule_review_check():
    def checker():
        while True:
            now = datetime.utcnow().isoformat()
            conn = sqlite3.connect('chck.db')
            cur = conn.cursor()
            cur.execute("SELECT chat_id1, chat_id2 FROM review_queue WHERE send_time <= ?", (now,))
            rows = cur.fetchall()
            for row in rows:
                send_review_request(row[0], row[1])
                cur.execute("DELETE FROM review_queue WHERE chat_id1 = ? AND chat_id2 = ?", (row[0], row[1]))
            conn.commit()
            cur.close()
            conn.close()
            time.sleep(60)
    threading.Thread(target=checker, daemon=True).start()

def find_match(chat_id):
    conn = sqlite3.connect('chck.db')
    cur = conn.cursor()

    cur.execute("SELECT user_id, match_time FROM matches")
    busy_users = {row[0]: row[1] for row in cur.fetchall()}

    now = datetime.utcnow()
    to_remove = [uid for uid, m_time in busy_users.items()
                 if datetime.fromisoformat(m_time) + timedelta(hours=48) <= now]
    for uid in to_remove:
        cur.execute("DELETE FROM matches WHERE user_id = ?", (uid,))
        busy_users.pop(uid)

    placeholders = ','.join(['?'] * len(busy_users)) if busy_users else '0'
    query = f"SELECT id, name, age, kazakh_level, gender, preferred_gender, telegram_username FROM users WHERE id != ? AND id NOT IN ({placeholders})"
    args = [chat_id] + list(busy_users.keys()) if busy_users else [chat_id]
    cur.execute(query, args)
    users = cur.fetchall()
    cur.close()
    conn.close()

    current = user_data[chat_id]
    required_score = 2

    for user in users:
        other_id, name, age, level, gender, preferred_gender, username = user

        if current['preferred_gender'] != "–ù–µ –≤–∞–∂–Ω–æ" and gender != current['preferred_gender']:
            continue
        if preferred_gender != "–ù–µ –≤–∞–∂–Ω–æ" and current['gender'] != preferred_gender:
            continue

        match_score = 0
        if fuzzy_match(current['kazakh_level'], level):
            match_score += 1
        if fuzzy_match(current['age'], age):
            match_score += 1

        if match_score >= required_score:
            bot.send_message(chat_id, f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{username}!\nüë§ –ò–º—è: {name}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {age}\n‚öß –ü–æ–ª: {gender}\nüó£ –£—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ: {level}")
            bot.send_message(other_id, f"üéâ –í—ã —Å–æ–≤–ø–∞–ª–∏ —Å @{current['telegram_username']}!\nüë§ –ò–º—è: {current['name']}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {current['age']}\n‚öß –ü–æ–ª: {current['gender']}\nüó£ –£—Ä–æ–≤–µ–Ω—å –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ: {current['kazakh_level']}")

            match_time = datetime.utcnow().isoformat()
            conn = sqlite3.connect('chck.db')
            cur = conn.cursor()
            cur.execute("REPLACE INTO matches (user_id, partner_id, match_time) VALUES (?, ?, ?)", (chat_id, other_id, match_time))
            cur.execute("REPLACE INTO matches (user_id, partner_id, match_time) VALUES (?, ?, ?)", (other_id, chat_id, match_time))
            conn.commit()
            cur.close()
            conn.close()

            schedule_review(chat_id, other_id)
            return

    bot.send_message(chat_id, "üòï –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–∑—ã–≤–æ–≤
schedule_review_check()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)
